{"task_id": "HumanEval/82", "completion": "\n    length = len(string)\n    if length <= 1:\n        return False\n    for i in range(2, length):\n        if length % i == 0:\n            return False\n    return True\n"}
{"task_id": "HumanEval/9", "completion": "\n    result = []\n    max_so_far = numbers[0]\n    result.append(max_so_far)\n    for num in numbers[1:]:\n        max_so_far = max(max_so_far, num)\n        result.append(max_so_far)\n    return result"}
{"task_id": "HumanEval/155", "completion": "\n    even_count = 0\n    odd_count = 0\n    \n    while num != 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num //= 10\n        \n    return (even_count, odd_count)\n"}
{"task_id": "HumanEval/154", "completion": "\n    for i in range(len(b)):\n        if a.find(b[i:] + b[:i]) != -1:\n            return True\n    return False"}
{"task_id": "HumanEval/11", "completion": "\n    result = ''\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            result += '0'\n        else:\n            result += '1'\n    return result\n"}
{"task_id": "HumanEval/85", "completion": "\n    sum = 0\n    for i in range(len(lst)):\n        if i % 2 != 0 and lst[i] % 2 == 0:\n            sum += lst[i]\n    return sum\n"}
{"task_id": "HumanEval/10", "completion": "\n    if len(string) == 0:\n        return ''\n    for i in range(len(string), -1, -1):\n        postfix = string[i:]\n        if is_palindrome(postfix):\n            prefix = string[:i]\n            return prefix + prefix[::-1]"}
{"task_id": "HumanEval/13", "completion": "\n    while b != 0:\n        a, b = b, a % b\n    return a"}
{"task_id": "HumanEval/157", "completion": "\n    if a**2 + b**2 == c**2:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/83", "completion": "\n    if n == 1:\n        return 10\n    count = 0\n    for i in range(1, 10):\n        count += 9 * (10 ** (n-2))  # Numbers with 1 at the end\n        if i == 1:\n            count += 10 ** (n-1)   # Numbers with 1 at the beginning\n    return count"}
{"task_id": "HumanEval/15", "completion": "\n    result = \"\"\n    for i in range(n + 1):\n        result += str(i) + \" \"\n    return result.strip()\n"}
{"task_id": "HumanEval/159", "completion": "\n    total_eaten = number\n    if need <= remaining:\n        total_eaten += need\n        remaining -= need\n    else:\n        total_eaten += remaining\n        remaining = 0\n    return [total_eaten, remaining]\n"}
{"task_id": "HumanEval/87", "completion": "\n    result = []\n    for row in range(len(lst)):\n        if x in lst[row]:\n            col = lst[row].index(x)\n            result.append((row, col))\n    result.sort()\n    for row_tup in result:\n        lst[row_tup[0]].sort(reverse=True)\n    return result\n"}
{"task_id": "HumanEval/89", "completion": "\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    new_alphabet = alphabet[2:] + alphabet[:2]\n    translation = str.maketrans(alphabet, new_alphabet)\n    return s.translate(translation)\n"}
{"task_id": "HumanEval/163", "completion": "\n    result = []\n    for num in range(a, b + 1):\n        if num % 2 == 0:\n            result.append(num)\n    return sorted(result)\n"}
{"task_id": "HumanEval/17", "completion": "\n    notes = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1\n    }\n\n    result = []\n    i = 0\n    while i < len(music_string):\n        if music_string[i] == 'o':\n            result.append(notes['o'])\n            i += 1\n        elif music_string[i:i+2] == 'o|':\n            result.append(notes['o|'])\n            i += 2\n        elif music_string[i:i+2] == '.|':\n            result.append(notes['.|'])\n            i += 2\n    return result\n"}
{"task_id": "HumanEval/91", "completion": "\n    boredom_count = 0\n    sentences = S.split('. ') + S.split('? ') + S.split('! ')\n    for sentence in sentences:\n        if sentence.startswith('I '):\n            boredom_count += 1\n    return boredom_count"}
{"task_id": "HumanEval/20", "completion": "\n    min_diff = float('inf')\n    closest_pair = (0, 0)\n    numbers.sort()\n    for i in range(len(numbers)-1):\n        diff = abs(numbers[i] - numbers[i+1])\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i+1])\n    return closest_pair\n"}
{"task_id": "HumanEval/22", "completion": "\n    return [x for x in values if isinstance(x, int)]\n"}
{"task_id": "HumanEval/161", "completion": "\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            result += char.swapcase()\n        else:\n            result += char\n    if not any(c.isalpha() for c in s):\n        result = result[::-1]\n    return result"}
{"task_id": "HumanEval/21", "completion": "\n    minimum = min(numbers)\n    maximum = max(numbers)\n    range = maximum - minimum\n    return [(num - minimum) / range for num in numbers]\n"}
{"task_id": "HumanEval/23", "completion": "\n    return len(string)\n"}
{"task_id": "HumanEval/26", "completion": "\n    seen = set()\n    result = []\n    for num in numbers:\n        if num not in seen:\n            result.append(num)\n            seen.add(num)\n    return result\n"}
{"task_id": "HumanEval/19", "completion": "\n    num_words = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    nums = [num_words[word] for word in numbers.split()]\n    nums.sort()\n    return ' '.join([list(num_words.keys())[list(num_words.values()).index(num)] for num in nums])"}
{"task_id": "HumanEval/24", "completion": "\n    for i in range(n-1, 1, -1):\n        if n % i == 0:\n            return i"}
{"task_id": "HumanEval/27", "completion": "\n    result = ''\n    for char in string:\n        if char.isupper():\n            result += char.lower()\n        elif char.islower():\n            result += char.upper()\n        else:\n            result += char\n    return result\n"}
{"task_id": "HumanEval/28", "completion": "\n    result = ''\n    for string in strings:\n        result += string\n    return result\n"}
{"task_id": "HumanEval/29", "completion": "\n    return [string for string in strings if string.startswith(prefix)]\n"}
{"task_id": "HumanEval/30", "completion": "\n    positive_numbers = []\n    for num in l:\n        if num > 0:\n            positive_numbers.append(num)\n    return positive_numbers\n"}
{"task_id": "HumanEval/25", "completion": "\n    factors = []\n    divisor = 2\n    while divisor <= n:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n = n / divisor\n        else:\n            divisor += 1\n    return factors"}
{"task_id": "HumanEval/31", "completion": "\n    if n <= 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n"}
{"task_id": "HumanEval/34", "completion": "\n    return sorted(set(l))\n"}
{"task_id": "HumanEval/35", "completion": "\n    max_elem = l[0]\n    for elem in l:\n        if elem > max_elem:\n            max_elem = elem\n    return max_elem\n"}
{"task_id": "HumanEval/36", "completion": "\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            if '7' in str(i):\n                count += 1\n    return count\n"}
{"task_id": "HumanEval/33", "completion": "\n    l_copy = l.copy()\n    for i in range(2, len(l), 3):\n        l_copy[i:i+3] = sorted(l[i:i+3])\n    return l_copy"}
{"task_id": "HumanEval/32", "completion": "\n    n = len(xs)\n    x0 = 0\n    x1 = 1\n    while poly(xs, x0) * poly(xs, x1) > 0:\n        x0 = x1\n        x1 *= 2\n    while abs(x1 - x0) > 1e-6:\n        x2 = (x0 + x1) / 2\n        if poly(xs, x0) * poly(xs, x2) < 0:\n            x1 = x2\n        else:\n            x0 = x2\n    return x2\n"}
{"task_id": "HumanEval/38", "completion": "\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # reverse cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n"}
{"task_id": "HumanEval/37", "completion": "\n    even_indices = [l[i] for i in range(len(l)) if i % 2 == 0]\n    even_indices.sort()\n    result = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            result.append(even_indices.pop(0))\n        else:\n            result.append(l[i])\n    return result"}
{"task_id": "HumanEval/40", "completion": "\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False"}
{"task_id": "HumanEval/115", "completion": "\n    rows, cols = len(grid), len(grid[0])\n    total = 0\n    for r in range(rows):\n        count = 0\n        for c in range(cols):\n            if grid[r][c] == 1:\n                count += 1\n        total += math.ceil(count / capacity)\n    return total\n"}
{"task_id": "HumanEval/39", "completion": "\n    fib_num = 1\n    prime_count = 1\n    while prime_count <= n:\n        fib_num = fib(fib_num)\n        if is_prime(fib_num):\n            prime_count += 1\n    return fib_num\n"}
{"task_id": "HumanEval/41", "completion": "\n    collisions = 0\n    for i in range(n):\n        collisions += i\n    return collisions"}
{"task_id": "HumanEval/118", "completion": "\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for i in range(len(word)-1, 0, -1):\n        if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n            return word[i]\n    return ''\n"}
{"task_id": "HumanEval/117", "completion": "\n    consonants = set('bcdfghjklmnpqrstvwxyz')\n    words = s.lower().split()\n    result = []\n    for word in words:\n        count = 0\n        for char in word:\n            if char in consonants:\n                count += 1\n        if count == n:\n            result.append(word)\n    return result"}
{"task_id": "HumanEval/116", "completion": "\n    def count_ones(n):\n        count = 0\n        while n:\n            count += n & 1\n            n >>= 1\n        return count\n    \n    arr.sort(key=lambda x: (count_ones(x), x))\n    return arr"}
{"task_id": "HumanEval/121", "completion": "\n    sum = 0\n    for i in range(len(lst)):\n        if i % 2 == 0 and lst[i] % 2 == 1:\n            sum += lst[i]\n    return sum\n"}
{"task_id": "HumanEval/122", "completion": "\n    sum = 0\n    for num in arr[:k]:\n        if num <= 99:\n            sum += num\n    return sum\n"}
{"task_id": "HumanEval/120", "completion": "\n    arr.sort()\n    return arr[-k:]"}
{"task_id": "HumanEval/119", "completion": "\n    s1, s2 = lst\n    stack = []\n    for c in s1:\n        if c == '(':\n            stack.append(c)\n        else:\n            if not stack:\n                return 'No'\n            stack.pop()\n    for c in s2:\n        if c == '(':\n            stack.append(c)\n        else:\n            if not stack:\n                return 'No'\n            stack.pop()\n    return 'Yes' if not stack else 'No'"}
{"task_id": "HumanEval/123", "completion": "\n    sequence = [n]\n    odd_numbers = []\n    while n > 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        sequence.append(n)\n        if n % 2 != 0:\n            odd_numbers.append(n)\n    odd_numbers.sort()\n    return odd_numbers"}
{"task_id": "HumanEval/126", "completion": "\n    if len(lst) <= 1:\n        return True\n    prev = lst[0]\n    count = 1\n    for num in lst[1:]:\n        if num == prev:\n            count += 1\n            if count > 1:\n                return False\n        elif num > prev:\n            prev = num\n            count = 1\n        else:\n            return False\n    return True\n"}
{"task_id": "HumanEval/125", "completion": "\n    if ' ' in txt:\n        return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        count = 0\n        for char in txt:\n            if ord(char) % 2 == 1 and ord(char) <= ord('z'):\n                count += 1\n        return count\n"}
{"task_id": "HumanEval/124", "completion": "\n    if date == '':\n        return False\n    \n    date_split = date.split('-')\n    if len(date_split) != 3:\n        return False\n    \n    month, day, year = date_split\n    if not month.isdigit() or not day.isdigit() or not year.isdigit():\n        return False\n    \n    month = int(month)\n    day = int(day)\n    year = int(year)\n    \n    if month < 1 or month > 12:\n        return False\n    \n    if month in [1, 3, 5, 7, 8, 10, 12] and (day < 1 or day > 31):\n        return False\n    if month in [4, 6, 9, 11] and (day < 1 or day > 30):\n        return False\n    if month == 2 and (day < 1 or day > 29):\n        return False\n    \n    return True\n"}
{"task_id": "HumanEval/127", "completion": "\n    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    # Check if intervals intersect\n    if start1 > end2 or start2 > end1:\n        return \"NO\"\n    \n    # Find intersection\n    start = max(start1, start2)\n    end = min(end1, end2)\n    \n    # Check if length is prime\n    length = end - start\n    if length == 2 or length == 3 or length == 5 or length == 7:\n        return \"YES\"\n    else:\n        return \"NO\"\n"}
{"task_id": "HumanEval/129", "completion": "\n    # Your code here\n"}
{"task_id": "HumanEval/133", "completion": "\n    sum = 0\n    for num in lst:\n        sum += math.ceil(num)**2\n    return sum\n"}
{"task_id": "HumanEval/130", "completion": "\n    if n == 0:\n        return [1]\n    if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1, 3, 2]\n    if n % 2 == 0:\n        return [1, 3, 2] + [1 + n//2] + tri(n-1)\n    else:\n        return [1, 3, 2] + tri(n-1) + tri(n-2) + tri(n+1) "}
{"task_id": "HumanEval/131", "completion": "\n    product = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 == 1:\n            product *= digit\n        n //= 10\n    return product"}
{"task_id": "HumanEval/132", "completion": "\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        else:\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) > 0"}
{"task_id": "HumanEval/128", "completion": "\n    if not arr:\n        return None\n    \n    sign_prod = 1\n    sum_mag = 0\n    \n    for num in arr:\n        if num > 0:\n            sign_prod *= 1\n            sum_mag += num\n        elif num < 0:\n            sign_prod *= -1\n            sum_mag += abs(num)\n        else:\n            sign_prod *= 0\n            \n    return sum_mag * sign_prod"}
{"task_id": "HumanEval/135", "completion": "\n    for i in range(len(arr)-1, 0, -1):\n        if arr[i] < arr[i-1]:\n            return i\n    return -1"}
{"task_id": "HumanEval/134", "completion": "\n    if not txt:\n        return False\n    last_char = txt[-1]\n    if last_char.isalpha() and txt[-2] == ' ':\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/136", "completion": "\n    largest_negative = None\n    smallest_positive = None\n    \n    for num in lst:\n        if num < 0 and (largest_negative is None or num > largest_negative):\n            largest_negative = num\n        elif num > 0 and (smallest_positive is None or num < smallest_positive):\n            smallest_positive = num\n            \n    return (largest_negative, smallest_positive)"}
{"task_id": "HumanEval/139", "completion": "\n    result = 1\n    for i in range(1, n + 1):\n        result *= i * special_factorial(i-1)\n    return result\n"}
{"task_id": "HumanEval/137", "completion": "\n    if type(a) != type(b):\n        return None\n    if type(a) == int or type(a) == float:\n        if a > b:\n            return a\n        elif b > a:\n            return b\n        else:\n            return None\n    if type(a) == str:\n        a = a.replace(',', '.')\n        b = b.replace(',', '.')\n        a = float(a)\n        b = float(b)\n        if a > b:\n            return str(a)\n        elif b > a:\n            return str(b)\n        else:\n            return None\n"}
{"task_id": "HumanEval/138", "completion": "\n    if n % 2 == 1:\n        return False\n    for a in range(2, n//2 + 1, 2):\n        for b in range(2, n//2 + 1, 2):\n            for c in range(2, n//2 + 1, 2):\n                if a + b + c + (n - a - b - c) == n:\n                    return True\n    return False"}
{"task_id": "HumanEval/141", "completion": "\n    digits = 0\n    for char in file_name:\n        if char.isdigit():\n            digits += 1\n        if digits > 3:\n            return 'No'\n    if file_name.count('.') != 1:\n        return 'No'\n    split_name = file_name.split('.')\n    if not split_name[0] or not split_name[0][0].isalpha():\n        return 'No'\n    if split_name[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'\n"}
{"task_id": "HumanEval/142", "completion": "\n    sum = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            sum += lst[i] ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            sum += lst[i] ** 3\n        else:\n            sum += lst[i]\n    return sum"}
{"task_id": "HumanEval/143", "completion": "\n    prime_words = []\n    words = sentence.split()\n    for word in words:\n        if is_prime(len(word)):\n            prime_words.append(word)\n    return ' '.join(prime_words)\n"}
{"task_id": "HumanEval/140", "completion": "\n    result = \"\"\n    space_count = 0\n    for char in text:\n        if char == \" \":\n            space_count += 1\n            if space_count > 2:\n                result += \"-\"\n                space_count = 0\n            else:\n                result += \"_\"\n        else:\n            result += char\n            space_count = 0\n    return result"}
{"task_id": "HumanEval/74", "completion": "\n    total1 = 0\n    total2 = 0\n    \n    for string in lst1:\n        total1 += len(string)\n    for string in lst2:\n        total2 += len(string)\n        \n    if total1 < total2:\n        return lst1\n    elif total2 < total1:\n        return lst2\n    else:\n        return lst1\n"}
{"task_id": "HumanEval/144", "completion": "\n    x_num, x_den = x.split('/')\n    n_num, n_den = n.split('/')\n    x_num, x_den, n_num, n_den = int(x_num), int(x_den), int(n_num), int(n_den)\n    \n    if x_den == n_den:\n        return x_num * n_num == x_den\n    else:\n        return x_num * n_den == x_den * n_num"}
{"task_id": "HumanEval/146", "completion": "\n    count = 0\n    for num in nums:\n        if num > 10:\n            first_digit = num // 10\n            last_digit = num % 10\n            if first_digit % 2 == 1 and last_digit % 2 == 1:\n                count += 1\n    return count"}
{"task_id": "HumanEval/3", "completion": "\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False\n"}
{"task_id": "HumanEval/145", "completion": "\n    if not nums:\n        return []\n    \n    sums = []\n    for num in nums:\n        sum_digits = 0\n        while num:\n            sum_digits += num % 10\n            num //= 10\n        sums.append(sum_digits)\n        \n    sorted_sums = sorted(sums)\n    result = []\n    for sum_digit in sorted_sums:\n        for i in range(len(sums)):\n            if sums[i] == sum_digit:\n                result.append(nums[i])\n                sums[i] = -1\n                break\n    return result"}
{"task_id": "HumanEval/1", "completion": "\n    groups = []\n    current_group = ''\n    open_parens = 0\n    \n    for char in paren_string:\n        if char == '(':\n            open_parens += 1\n            current_group += char\n        elif char == ')':\n            open_parens -= 1\n            current_group += char\n            \n            if open_parens == 0:\n                groups.append(current_group)\n                current_group = ''\n        else:\n            current_group += char\n            \n    return groups"}
{"task_id": "HumanEval/5", "completion": "\n    result = []\n    for i in range(len(numbers)-1):\n        result.append(numbers[i])\n        result.append(delimeter)\n    result.append(numbers[-1])\n    return result\n"}
{"task_id": "HumanEval/76", "completion": "\n    if x == 1:\n        return True\n    power = 1\n    while power < x:\n        power = power * n\n        if power == x:\n            return True\n    return False"}
{"task_id": "HumanEval/7", "completion": "\n    filtered = []\n    for string in strings:\n        if substring in string:\n            filtered.append(string)\n    return filtered\n"}
{"task_id": "HumanEval/150", "completion": "\n    if n <= 1:\n        return y\n    if n == 2:\n        return x\n    if n > 2 and n % 2 == 0:\n        return y\n    max_div = n ** 0.5\n    for i in range(3, int(max_div)+1, 2):\n        if n % i == 0:\n            return y\n    return x"}
{"task_id": "HumanEval/78", "completion": "\n    prime_digits = {'2', '3', '5', '7', 'B', 'D'}\n    count = 0\n    for char in num:\n        if char in prime_digits:\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/148", "completion": "\n    planets = ('Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')\n    try:\n        start = planets.index(planet1)\n        end = planets.index(planet2)\n    except ValueError:\n        return ()\n    \n    return planets[start+1:end]"}
{"task_id": "HumanEval/152", "completion": "\n    result = []\n    for i in range(len(game)):\n        diff = abs(game[i] - guess[i])\n        result.append(diff)\n    return result"}
{"task_id": "HumanEval/14", "completion": "\n    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i+1])\n    return prefixes"}
{"task_id": "HumanEval/86", "completion": "\n    words = s.split()\n    ordered_words = []\n    for word in words:\n        ordered_word = ''.join(sorted(word))\n        ordered_words.append(ordered_word)\n    return ' '.join(ordered_words)"}
{"task_id": "HumanEval/81", "completion": "\n    letter_grades = []\n    for grade in grades:\n        if grade >= 4.0:\n            letter_grades.append('A+')\n        elif grade > 3.7:\n            letter_grades.append('A')\n        elif grade > 3.3:\n            letter_grades.append('A-')\n        elif grade > 3.0:\n            letter_grades.append('B+')\n        elif grade > 2.7:\n            letter_grades.append('B')\n        elif grade > 2.3:\n            letter_grades.append('B-')\n        elif grade > 2.0:\n            letter_grades.append('C+')\n        elif grade > 1.7:\n            letter_grades.append('C')\n        elif grade > 1.3:\n            letter_grades.append('C-')\n        elif grade > 1.0:\n            letter_grades.append('D+')\n        elif grade > 0.7:\n            letter_grades.append('D')\n        elif grade > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades\n"}
{"task_id": "HumanEval/80", "completion": "\n    if len(s) < 3:\n        return False\n    \n    for i in range(len(s)-2):\n        if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n            return False\n    return True"}
{"task_id": "HumanEval/156", "completion": "\n    roman_numerals = {1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl', 50: 'l', 90: 'xc', 100: 'c', 400: 'cd', 500: 'd', 900: 'cm', 1000: 'm'}\n    result = ''\n    for value, numeral in roman_numerals.items():\n        while number >= value:\n            result += numeral\n            number -= value\n    return result"}
{"task_id": "HumanEval/18", "completion": "\n    count = 0\n    for i in range(len(string)-len(substring)+1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count"}
{"task_id": "HumanEval/160", "completion": "\n    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i+1]\n        elif operator[i] == '-':\n            result -= operand[i+1]\n        elif operator[i] == '*':\n            result *= operand[i+1]\n        elif operator[i] == '//':\n            result //= operand[i+1]\n        elif operator[i] == '**':\n            result **= operand[i+1]\n    return result\n"}
{"task_id": "HumanEval/90", "completion": "\n    if len(lst) < 2:\n        return None\n    smallest = lst[0]\n    second_smallest = lst[1]\n    for num in lst[2:]:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest:\n            second_smallest = num\n    return second_smallest"}
{"task_id": "HumanEval/95", "completion": "\n    if not dict:\n        return False\n    \n    keys = dict.keys()\n    all_lower = True\n    all_upper = True\n    \n    for key in keys:\n        if not key.islower():\n            all_lower = False\n        if not key.isupper():\n            all_upper = False\n            \n    return all_lower or all_upper\n"}
{"task_id": "HumanEval/97", "completion": "\n    return int(str(a)[-1]) * int(str(b)[-1])\n"}
{"task_id": "HumanEval/101", "completion": "\n    return s.split()\n"}
{"task_id": "HumanEval/99", "completion": "\n    num = float(value)\n    if num.is_integer():\n        return int(num)\n    else:\n        rounded = round(num)\n        if num - rounded > 0.5:\n            return rounded + 1\n        else:\n            return rounded\n"}
{"task_id": "HumanEval/93", "completion": "\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    mapping = {'a': 'c', 'e': 'g', 'i': 'k', 'o': 'q', 'u': 'w'}\n    \n    encoded = ''\n    for char in message:\n        if char.lower() in vowels:\n            encoded += mapping[char.lower()]\n        else:\n            if char.islower():\n                encoded += char.upper()\n            else:\n                encoded += char.lower()\n    return encoded"}
{"task_id": "HumanEval/105", "completion": "\n    nums = []\n    for num in arr:\n        if 1 <= num <= 9:\n            nums.append(num)\n    nums.sort()\n    nums.reverse()\n    \n    names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    return [names[num-1] for num in nums]\n"}
{"task_id": "HumanEval/107", "completion": "\n    even_count = 0\n    odd_count = 0\n    for num in range(1, n + 1):\n        if str(num) == str(num)[::-1]:\n            if num % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/103", "completion": "\n    if n > m:\n        return -1\n    total = 0\n    for i in range(n, m+1):\n        total += i\n    average = total / (m - n + 1)\n    rounded = round(average)\n    binary = bin(rounded)\n    return binary"}
{"task_id": "HumanEval/113", "completion": "\n    result = []\n    for num_str in lst:\n        odd_count = 0\n        for char in num_str:\n            if int(char) % 2 == 1:\n                odd_count += 1\n        result.append(\"the number of odd elements \" + str(odd_count) + \"n the str\" + str(odd_count) + \"ng \" + str(odd_count) + \" of the \" + str(odd_count) + \"nput.\")\n    return result\n"}
{"task_id": "HumanEval/109", "completion": "\n    if not arr:\n        return True\n    \n    n = len(arr)\n    i = 0\n    while i < n-1 and arr[i] <= arr[i+1]:\n        i += 1\n        \n    if i == n-1:\n        return True\n    \n    j = i+1\n    while j < n and arr[i] > arr[j]:\n        j += 1\n        \n    if j == n:\n        return False\n    \n    k = j\n    while k < n and arr[i] <= arr[k]:\n        k += 1\n        \n    if k == n:\n        return True\n    \n    l = k \n    while l < n and arr[j-1] > arr[l]:\n        l += 1\n        \n    if l == n:\n        return False\n    \n    return True \n"}
{"task_id": "HumanEval/45", "completion": "\n    return (a * h) / 2\n"}
{"task_id": "HumanEval/43", "completion": "\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False"}
{"task_id": "HumanEval/111", "completion": "\n    histogram = {}\n    for char in test.lower().split(' '):\n        if char in histogram:\n            histogram[char] += 1\n        else:\n            histogram[char] = 1\n    max_count = max(histogram.values())\n    result = {k:v for k, v in histogram.items() if v == max_count}\n    return result"}
{"task_id": "HumanEval/47", "completion": "\n    l.sort()\n    mid = len(l) // 2\n    if len(l) % 2 == 1:\n        return l[mid]\n    else:\n        return (l[mid - 1] + l[mid]) / 2"}
{"task_id": "HumanEval/53", "completion": "\n    return x + y\n"}
{"task_id": "HumanEval/114", "completion": "\n    min_sum = float('inf')\n    current_sum = 0\n    start = 0\n    \n    for end in range(len(nums)):\n        current_sum += nums[end]\n        while current_sum >= min_sum:\n            min_sum = min(min_sum, current_sum)\n            current_sum -= nums[start]\n            start += 1\n    return min_sum"}
{"task_id": "HumanEval/51", "completion": "\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    result = \"\"\n    for char in text:\n        if char.lower() not in vowels:\n            result += char\n    return result\n"}
{"task_id": "HumanEval/55", "completion": "\n    if n <= 1:\n        return n\n    return fib(n-1) + fib(n-2)"}
{"task_id": "HumanEval/49", "completion": "\n    result = 1\n    base = 2\n    while n > 0:\n        if n % 2 == 1:\n            result = (result * base) % p\n        base = (base * base) % p\n        n //= 2\n    return result"}
{"task_id": "HumanEval/59", "completion": "\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n"}
{"task_id": "HumanEval/57", "completion": "\n    if len(l) <= 1:\n        return True\n    direction = None\n    for i in range(1, len(l)):\n        if direction is None:\n            if l[i] > l[i-1]:\n                direction = 'increasing'\n            elif l[i] < l[i-1]:\n                direction = 'decreasing'\n        else:\n            if direction == 'increasing' and l[i] <= l[i-1]:\n                return False\n            elif direction == 'decreasing' and l[i] >= l[i-1]:\n                return False\n    return True\n"}
{"task_id": "HumanEval/61", "completion": "\n    stack = []\n    for char in brackets:\n        if char == '(':\n            stack.append(char)\n        else:\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/63", "completion": "\n    if n <= 2:\n        return n\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)"}
{"task_id": "HumanEval/65", "completion": "\n    digits = []\n    while x > 0:\n        digits.append(x % 10)\n        x //= 10\n    if shift > len(digits):\n        digits.reverse()\n    else:\n        digits = digits[-shift:] + digits[:-shift]\n    return ''.join(str(d) for d in digits)"}
{"task_id": "HumanEval/67", "completion": "\n    apples = 0\n    oranges = 0\n    \n    # Get the number of apples and oranges from the string\n    for word in s.split():\n        if word.isdigit():\n            if 'apples' in s:\n                apples += int(word)\n            elif 'oranges' in s:\n                oranges += int(word)\n    \n    # Calculate the number of mangoes        \n    mangoes = n - apples - oranges\n    \n    return mangoes\n"}
{"task_id": "HumanEval/68", "completion": "\n    smallest_even = None\n    smallest_index = None\n    \n    for i, num in enumerate(arr):\n        if num % 2 == 0:\n            if smallest_even is None or num < smallest_even:\n                smallest_even = num\n                smallest_index = i\n            elif num == smallest_even and i < smallest_index:\n                smallest_index = i\n                \n    if smallest_even is not None:\n        return [smallest_even, smallest_index]\n    else:\n        return []\n"}
{"task_id": "HumanEval/77", "completion": "\n    import math\n    if a == 0:\n        return True\n    cube_root = math.pow(a, 1/3)\n    return cube_root == int(cube_root)"}
{"task_id": "HumanEval/73", "completion": "\n    # Find the first half of the array\n    first_half = arr[:len(arr) // 2]  \n    \n    # Find the second half of the array\n    second_half = arr[len(arr) // 2 + len(arr) % 2:]\n    \n    # Reverse the second half\n    second_half.reverse()\n    \n    # Count the number of elements that differ\n    count = 0\n    for i in range(len(first_half)):\n        if first_half[i] != second_half[i]:\n            count += 1\n    return count"}
{"task_id": "HumanEval/4", "completion": "\n    mean = sum(numbers) / len(numbers)\n    total_deviation = 0\n    for num in numbers:\n        total_deviation += abs(num - mean)\n    return total_deviation / len(numbers)"}
{"task_id": "HumanEval/71", "completion": "\n    # Check if the three sides form a valid triangle\n    if a + b > c and a + c > b and b + c > a:\n        # Calculate the semi-perimeter\n        s = (a + b + c) / 2\n        # Calculate the area\n        area = (s*(s-a)*(s-b)*(s-c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/147", "completion": "\n    a = [i*i - i + 1 for i in range(1, n+1)]\n    count = 0\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count"}
{"task_id": "HumanEval/8", "completion": "\n    sum = 0\n    product = 1\n    for num in numbers:\n        sum += num\n        product *= num\n    return sum, product\n"}
{"task_id": "HumanEval/16", "completion": "\n    distinct_characters = set()\n    for char in string:\n        distinct_characters.add(char.lower())\n    return len(distinct_characters)\n"}
{"task_id": "HumanEval/151", "completion": "\n    sum = 0\n    for num in lst:\n        if num > 0 and num.is_integer():\n            if num % 2 != 0:\n                sum += num * num\n    return sum"}
{"task_id": "HumanEval/92", "completion": "\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        if x == y + z or y == x + z or z == x + y:\n            return True\n        else:\n            return False\n    else:\n        return False"}
{"task_id": "HumanEval/158", "completion": "\n    max_word = \"\"\n    max_unique_chars = 0\n    \n    for word in words:\n        unique_chars = set(word)\n        if len(unique_chars) > max_unique_chars:\n            max_unique_chars = len(unique_chars)\n            max_word = word\n        elif len(unique_chars) == max_unique_chars and word < max_word:\n            max_word = word\n            \n    return max_word"}
{"task_id": "HumanEval/96", "completion": "\n    primes = []\n    for num in range(2, n):\n        if all(num%i!=0 for i in range(2, num)):\n            primes.append(num)\n        if len(primes) == n:\n            break\n    return primes"}
{"task_id": "HumanEval/84", "completion": "\n    sum = 0\n    while N > 0:\n        sum += N % 2\n        N = N // 2\n    binary = \"\"\n    while sum > 0:\n        binary = str(sum % 2) + binary\n        sum = sum // 2\n    return binary"}
{"task_id": "HumanEval/42", "completion": "\n    return [x + 1 for x in l]\n"}
{"task_id": "HumanEval/100", "completion": "\n    pile = [n]\n    if n % 2 == 0:  # n is even\n        for i in range(n-1):\n            pile.append(pile[-1] + 2)\n    else:  # n is odd\n        for i in range(n-1):\n            pile.append(pile[-1] + 2)\n    return pile"}
{"task_id": "HumanEval/104", "completion": "\n    result = []\n    for num in x:\n        has_even = False\n        while num > 0:\n            digit = num % 10\n            if digit % 2 == 0:\n                has_even = True\n                break\n            num //= 10\n        if not has_even:\n            result.append(num)\n    result.sort()\n    return result"}
{"task_id": "HumanEval/112", "completion": "\n    result = \"\"\n    for char in s:\n        if char not in c:\n            result += char\n    return (result, result == result[::-1])"}
{"task_id": "HumanEval/50", "completion": "\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"}
{"task_id": "HumanEval/108", "completion": "\n    count = 0\n    for num in arr:\n        if num > 0:\n            sum_digits = 0\n            while num > 0:\n                sum_digits += num % 10\n                num //= 10\n            if sum_digits > 0:\n                count += 1\n        elif num < 0:\n            sum_digits = 0\n            while num < 0:\n                sum_digits += -1 * (num % 10)\n                num //= 10\n            if sum_digits > 0:\n                count += 1\n    return count"}
{"task_id": "HumanEval/46", "completion": "\n    if n <= 3:\n        return [0, 0, 2, 0][n]\n    prev4, prev3, prev2, prev1 = 0, 0, 2, 0\n    for i in range(4, n + 1):\n        prev4, prev3, prev2, prev1 = prev3, prev2, prev1, prev4 + prev3 + prev2 + prev1\n    return prev1\n"}
{"task_id": "HumanEval/54", "completion": "\n    return sorted(s0) == sorted(s1)"}
{"task_id": "HumanEval/58", "completion": "\n    return sorted(set(l1) & set(l2))\n"}
{"task_id": "HumanEval/62", "completion": "\n    result = []\n    for i in range(1, len(xs)):\n        result.append(i * xs[i])\n    return result"}
{"task_id": "HumanEval/2", "completion": "\n    return number % 1\n"}
{"task_id": "HumanEval/66", "completion": "\n    sum = 0\n    for char in s:\n        if char.isupper():\n            sum += ord(char)\n    return sum"}
{"task_id": "HumanEval/149", "completion": "\n    # Remove odd length strings\n    lst = [word for word in lst if len(word) % 2 == 0]\n    \n    # Sort by length, then alphabetically\n    lst.sort(key=lambda x: (len(x), x))\n    \n    return lst\n"}
{"task_id": "HumanEval/12", "completion": "\n    if not strings:\n        return None\n    longest_string = strings[0]\n    longest_length = len(strings[0])\n    for string in strings:\n        if len(string) > longest_length:\n            longest_string = string\n            longest_length = len(string)\n    return longest_string\n"}
{"task_id": "HumanEval/162", "completion": "\n    import hashlib\n    if not text:\n        return None\n    md5 = hashlib.md5()\n    md5.update(text.encode('utf-8'))\n    return md5.hexdigest()\n"}
{"task_id": "HumanEval/98", "completion": "\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in 'AEIOU' and s[i].isupper():\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/70", "completion": "\n    if not lst:\n        return []\n    \n    sorted_lst = []\n    min_idx = lst.index(min(lst))\n    max_idx = lst.index(max(lst))\n    \n    sorted_lst.append(lst.pop(min_idx))\n    sorted_lst.append(lst.pop(max_idx - 1))\n    \n    while lst:\n        min_idx = lst.index(min(lst))\n        sorted_lst.append(lst.pop(min_idx))\n        \n        if lst:\n            max_idx = lst.index(max(lst))\n            sorted_lst.append(lst.pop(max_idx - 1))\n        \n    return sorted_lst\n"}
{"task_id": "HumanEval/79", "completion": "\n    binary = \"db\"\n    while decimal > 0:\n        remainder = decimal % 2\n        decimal = decimal // 2\n        binary = str(remainder) + binary\n    binary += \"db\"\n    return binary"}
{"task_id": "HumanEval/48", "completion": "\n    text = text.lower()\n    text = ''.join(c for c in text if c.isalnum())\n    return text == text[::-1]\n"}
{"task_id": "HumanEval/106", "completion": "\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            factorial = 1\n            for j in range(2, i+1):\n                factorial *= j\n            result.append(factorial)\n        else:\n            sum = 0\n            for j in range(1, i+1):\n                sum += j\n            result.append(sum)\n    return result"}
{"task_id": "HumanEval/0", "completion": "\n    for i in range(len(numbers)-1):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False"}
{"task_id": "HumanEval/72", "completion": "\n    sum = 0\n    for num in q:\n        sum += num\n    if sum <= w and q == q[::-1]:\n        return True\n    else:\n        return False\n"}
{"task_id": "HumanEval/56", "completion": "\n    stack = []\n    for bracket in brackets:\n        if bracket == '<':\n            stack.append(bracket)\n        elif bracket == '>':\n            if not stack or stack.pop() != '<':\n                return False\n    return not stack"}
{"task_id": "HumanEval/102", "completion": "\n    for num in range(x, y + 1):\n        if num % 2 == 0:\n            return num\n    return -1\n"}
{"task_id": "HumanEval/88", "completion": "\n    if not array:\n        return array\n    first = array[0]\n    last = array[-1]\n    sum_ = first + last\n    if sum_ % 2 == 1:\n        return sorted(array)\n    else:\n        return sorted(array, reverse=True)\n"}
{"task_id": "HumanEval/64", "completion": "\n    num_vowels = 0\n    for char in s:\n        if char in ['a', 'e', 'i', 'o', 'u']:\n            num_vowels += 1\n        elif char == 'y' and s[-1] == 'y':\n            num_vowels += 1\n    return num_vowels\n"}
{"task_id": "HumanEval/44", "completion": "\n    result = ''\n    while x > 0:\n        remainder = x % base\n        result = str(remainder) + result\n        x = x // base\n    return result"}
{"task_id": "HumanEval/60", "completion": "\n    sum = 0\n    for i in range(1, n + 1):\n        sum += i\n    return sum\n"}
{"task_id": "HumanEval/52", "completion": "\n    for num in l:\n        if num >= t:\n            return False\n    return True\n"}
{"task_id": "HumanEval/6", "completion": "\n    result = []\n    current_string = ''\n    level = 0\n    for char in paren_string:\n        if char == '(':\n            level += 1\n            current_string += char\n        elif char == ')':\n            level -= 1\n            current_string += char\n        elif char == ' ':\n            result.append(level)\n            level = 0\n            current_string = ''\n    result.append(level)\n    return result"}
{"task_id": "HumanEval/94", "completion": "\n    largest_prime = 0\n    for num in lst:\n        if num > largest_prime and is_prime(num):\n            largest_prime = num\n    sum_digits = 0\n    while largest_prime > 0:\n        sum_digits += largest_prime % 10\n        largest_prime //= 10\n    return sum_digits\n"}
{"task_id": "HumanEval/153", "completion": "\n    strongest_ext = ''\n    max_strength = -float('inf')\n    for ext in extensions:\n        cap_letters = 0\n        sm_letters = 0\n        for char in ext:\n            if char.isupper():\n                cap_letters += 1\n            elif char.islower():\n                sm_letters += 1\n        strength = cap_letters - sm_letters\n        if strength > max_strength:\n            max_strength = strength\n            strongest_ext = ext\n    return class_name + '.' + strongest_ext\n"}
{"task_id": "HumanEval/75", "completion": "\n    if a < 2:\n        return False\n    for i in range(2, a):\n        if a % i == 0:\n            j = a / i\n            if i > 2 and j > 2 and is_prime(i) and is_prime(j):\n                return True\n    return False\n"}
{"task_id": "HumanEval/110", "completion": "\n    even_lst1 = []\n    odd_lst2 = []\n    \n    for num in lst1:\n        if num % 2 == 0:\n            even_lst1.append(num)\n        else:\n            odd_lst2.append(num)\n            \n    for num in lst2:\n        if num % 2 == 1:\n            odd_lst2.append(num)\n            \n    if len(even_lst1) == len(lst1) and len(odd_lst2) >= len(lst2) - len(even_lst1):\n        return \"YES\"\n    else:\n        return \"NO\"\n"}
{"task_id": "HumanEval/69", "completion": "\n    frequencies = {}\n    for num in lst:\n        if num in frequencies:\n            frequencies[num] += 1\n        else:\n            frequencies[num] = 1\n    \n    for num in range(len(lst), 0, -1):\n        if num in frequencies and frequencies[num] >= num:\n            return num\n    return -1"}
