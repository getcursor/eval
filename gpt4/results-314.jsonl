{"task_id": "HumanEval/55", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)"}
{"task_id": "HumanEval/56", "completion": "\n    count = 0\n    for bracket in brackets:\n        if bracket == \"<\":\n            count += 1\n        elif bracket == \">\":\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0"}
{"task_id": "HumanEval/57", "completion": "\n    if len(l) < 2:\n        return True\n\n    direction = l[1] - l[0]\n    for i in range(2, len(l)):\n        if direction == 0:\n            direction = l[i] - l[i - 1]\n            continue\n\n        if (l[i] - l[i - 1]) * direction < 0:\n            return False\n\n    return True"}
{"task_id": "HumanEval/128", "completion": "\n    if not arr:\n        return None\n\n    sum_magnitudes = 0\n    product_signs = 1\n\n    for num in arr:\n        if num == 0:\n            return 0\n        sum_magnitudes += abs(num)\n        product_signs *= (1 if num > 0 else -1)\n\n    return sum_magnitudes * product_signs"}
{"task_id": "HumanEval/131", "completion": "\n    product = 1\n    has_odd_digit = False\n\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            product *= int(digit)\n            has_odd_digit = True\n\n    return product if has_odd_digit else 0"}
{"task_id": "HumanEval/132", "completion": "\n    stack = []\n    nested = False\n\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']' and stack:\n            stack.pop()\n            if not stack:\n                nested = True\n                break\n\n    return nested and not stack"}
{"task_id": "HumanEval/127", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n\n    if start > end:\n        return \"NO\"\n\n    intersection_length = end - start\n\n    if is_prime(intersection_length):\n        return \"YES\"\n    else:\n        return \"NO\""}
{"task_id": "HumanEval/130", "completion": "\n    def tribonacci(n, memo={}):\n        if n == 1:\n            return 3\n        if n % 2 == 0:\n            return 1 + n // 2\n        if n in memo:\n            return memo[n]\n        memo[n] = tribonacci(n - 1) + tribonacci(n - 2) + tribonacci(n + 1)\n        return memo[n]\n\n    return [tribonacci(i) for i in range(n + 1)]"}
{"task_id": "HumanEval/135", "completion": "\n    largest_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i - 1]:\n            largest_index = i\n    return largest_index"}
{"task_id": "HumanEval/133", "completion": "\n    import math\n\n    # Round each element in the list to the upper int (Ceiling)\n    rounded_lst = [math.ceil(num) for num in lst]\n\n    # Calculate the sum of squared numbers in the rounded list\n    sum_of_squares = sum([num ** 2 for num in rounded_lst])\n\n    return sum_of_squares"}
{"task_id": "HumanEval/134", "completion": "\n    if len(txt) == 0 or txt[-1] == \" \":\n        return False\n    elif txt[-1].isalpha() and (len(txt) == 1 or txt[-2] == \" \"):\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/138", "completion": "\n    if n < 8 or n % 2 != 0:\n        return False\n    else:\n        return (n - 8) % 4 == 0"}
{"task_id": "HumanEval/129", "completion": "\n    def dfs(i, j, k, path, visited):\n        if k == 0:\n            return path\n        visited.add((i, j))\n        min_path = None\n        for x, y in [(i-1, j), (i+1, j), (i, j-1), (i, j+1)]:\n            if 0 <= x < len(grid) and 0 <= y < len(grid[0]) and (x, y) not in visited:\n                new_path = dfs(x, y, k-1, path + [grid[x][y]], visited.copy())\n                if min_path is None or new_path < min_path:\n                    min_path = new_path\n        return min_path\n\n    min_path = None\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            path = dfs(i, j, k-1, [grid[i][j]], set())\n            if min_path is None or path < min_path:\n                min_path = path\n\n    return min_path"}
{"task_id": "HumanEval/136", "completion": "\n    largest_negative = None\n    smallest_positive = None\n\n    for num in lst:\n        if num < 0:\n            if largest_negative is None or num > largest_negative:\n                largest_negative = num\n        elif num > 0:\n            if smallest_positive is None or num < smallest_positive:\n                smallest_positive = num\n\n    return (largest_negative, smallest_positive)"}
{"task_id": "HumanEval/139", "completion": "\n    def factorial(x):\n        if x == 0 or x == 1:\n            return 1\n        else:\n            return x * factorial(x - 1)\n\n    result = 1\n    for i in range(1, n + 1):\n        result *= factorial(i)\n\n    return result"}
{"task_id": "HumanEval/137", "completion": "\n    def convert_to_float(value):\n        if isinstance(value, str):\n            value = value.replace(\",\", \".\")\n            return float(value)\n        return value\n\n    a_float = convert_to_float(a)\n    b_float = convert_to_float(b)\n\n    if a_float == b_float:\n        return None\n    elif a_float > b_float:\n        return a\n    else:\n        return b"}
{"task_id": "HumanEval/140", "completion": "\n    import re\n\n    # Replace more than 2 consecutive spaces with -\n    text = re.sub(r\" {3,}\", \"-\", text)\n\n    # Replace remaining spaces with underscores\n    text = text.replace(\" \", \"_\")\n\n    return text"}
{"task_id": "HumanEval/144", "completion": "\n    from fractions import Fraction\n\n    # Convert the strings to Fraction objects\n    x_frac = Fraction(x)\n    n_frac = Fraction(n)\n\n    # Multiply the fractions\n    result = x_frac * n_frac\n\n    # Check if the result is a whole number\n    return result.denominator == 1"}
{"task_id": "HumanEval/1", "completion": "\n    result = []\n    stack = []\n    start = 0\n\n    for i, char in enumerate(paren_string):\n        if char == '(':\n            if not stack:\n                start = i\n            stack.append(char)\n        elif char == ')':\n            stack.pop()\n            if not stack:\n                result.append(paren_string[start:i+1])\n\n    return result"}
{"task_id": "HumanEval/142", "completion": "\n    result = 0\n    for i, num in enumerate(lst):\n        if i % 3 == 0 and i % 4 != 0:\n            result += num ** 2\n        elif i % 4 == 0:\n            result += num ** 3\n        else:\n            result += num\n    return result"}
{"task_id": "HumanEval/143", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)"}
{"task_id": "HumanEval/141", "completion": "\n    import re\n\n    # Check if there is exactly one dot in the file name\n    if file_name.count('.') != 1:\n        return 'No'\n\n    # Split the file name into name and extension\n    name, extension = file_name.split('.')\n\n    # Check if the name starts with a latin alphabet letter\n    if not re.match(r'^[a-zA-Z]', name):\n        return 'No'\n\n    # Check if there are not more than three digits in the name\n    if len(re.findall(r'\\d', name)) > 3:\n        return 'No'\n\n    # Check if the extension is one of the allowed extensions\n    if extension not in ['txt', 'exe', 'dll']:\n        return 'No'\n\n    return 'Yes'"}
{"task_id": "HumanEval/2", "completion": "\n    decimal_part = number - int(number)\n    return decimal_part"}
{"task_id": "HumanEval/146", "completion": "\n    def is_odd_digit(num):\n        return num in [1, 3, 5, 7, 9]\n\n    def first_and_last_odd(num):\n        num_str = str(abs(num))\n        return is_odd_digit(int(num_str[0])) and is_odd_digit(int(num_str[-1]))\n\n    count = 0\n    for num in nums:\n        if num > 10 and first_and_last_odd(num):\n            count += 1\n\n    return count"}
{"task_id": "HumanEval/74", "completion": "\n    # Calculate the total number of characters in each list\n    total_chars_lst1 = sum(len(s) for s in lst1)\n    total_chars_lst2 = sum(len(s) for s in lst2)\n\n    # Compare the total number of characters and return the list with less characters\n    if total_chars_lst1 < total_chars_lst2:\n        return lst1\n    elif total_chars_lst1 > total_chars_lst2:\n        return lst2\n    else:\n        return lst1"}
{"task_id": "HumanEval/76", "completion": "\n    if n == 1:\n        return x == 1\n    power = 0\n    while n ** power <= x:\n        if n ** power == x:\n            return True\n        power += 1\n    return False"}
{"task_id": "HumanEval/4", "completion": "\n    # Calculate the mean of the input numbers\n    mean = sum(numbers) / len(numbers)\n\n    # Calculate the absolute differences between each number and the mean\n    absolute_differences = [abs(number - mean) for number in numbers]\n\n    # Calculate the mean of the absolute differences\n    mad = sum(absolute_differences) / len(absolute_differences)\n\n    return mad"}
{"task_id": "HumanEval/150", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n        return True\n\n    if is_prime(n):\n        return x\n    else:\n        return y"}
{"task_id": "HumanEval/148", "completion": "\n    planets = {\n        \"Mercury\": 1,\n        \"Venus\": 2,\n        \"Earth\": 3,\n        \"Mars\": 4,\n        \"Jupiter\": 5,\n        \"Saturn\": 6,\n        \"Uranus\": 7,\n        \"Neptune\": 8\n    }\n\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n\n    planet1_index = planets[planet1]\n    planet2_index = planets[planet2]\n\n    if planet1_index > planet2_index:\n        planet1_index, planet2_index = planet2_index, planet1_index\n\n    result = [planet for planet, index in planets.items() if planet1_index < index < planet2_index]\n\n    return tuple(result)"}
{"task_id": "HumanEval/6", "completion": "\n    result = []\n    groups = paren_string.split()\n\n    for group in groups:\n        depth = 0\n        max_depth = 0\n        for char in group:\n            if char == '(':\n                depth += 1\n            elif char == ')':\n                depth -= 1\n            max_depth = max(max_depth, depth)\n        result.append(max_depth)\n\n    return result"}
{"task_id": "HumanEval/78", "completion": "\n    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    count = 0\n    for digit in num:\n        if digit in prime_hex_digits:\n            count += 1\n    return count"}
{"task_id": "HumanEval/8", "completion": "\n    total_sum = 0\n    total_product = 1\n\n    for number in numbers:\n        total_sum += number\n        total_product *= number\n\n    return total_sum, total_product"}
{"task_id": "HumanEval/82", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(len(string))"}
{"task_id": "HumanEval/80", "completion": "\n    if len(s) < 3:\n        return False\n\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n\n    return True"}
{"task_id": "HumanEval/152", "completion": "\n    result = []\n    for i in range(len(game)):\n        difference = abs(game[i] - guess[i])\n        result.append(difference)\n    return result"}
{"task_id": "HumanEval/154", "completion": "\n    def rotate(s):\n        return s[1:] + s[0]\n\n    for _ in range(len(b)):\n        if b in a:\n            return True\n        b = rotate(b)\n    return False"}
{"task_id": "HumanEval/10", "completion": "\n    def is_palindrome(s: str) -> bool:\n        return s == s[::-1]\n\n    if not string:\n        return \"\"\n\n    for i in range(len(string), 0, -1):\n        if is_palindrome(string[:i]):\n            break\n\n    return string + string[i - 1::-1]"}
{"task_id": "HumanEval/84", "completion": "\n    # Convert N to binary and count the number of 1s\n    binary_sum = bin(N).count('1')\n\n    # Convert the binary_sum to binary string and return it\n    return bin(binary_sum)[2:]"}
{"task_id": "HumanEval/12", "completion": "\n    if not strings:\n        return None\n\n    longest_string = strings[0]\n    for string in strings:\n        if len(string) > len(longest_string):\n            longest_string = string\n\n    return longest_string"}
{"task_id": "HumanEval/156", "completion": "\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n        ]\n    syb = [\n        \"M\", \"CM\", \"D\", \"CD\",\n        \"C\", \"XC\", \"L\", \"XL\",\n        \"X\", \"IX\", \"V\", \"IV\",\n        \"I\"\n        ]\n    roman_num = ''\n    i = 0\n    while  number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syb[i]\n            number -= val[i]\n        i += 1\n    return roman_num.lower()"}
{"task_id": "HumanEval/86", "completion": "\n    def sort_word(word):\n        return ''.join(sorted(word))\n\n    words = s.split(' ')\n    sorted_words = [sort_word(word) for word in words]\n    return ' '.join(sorted_words)"}
{"task_id": "HumanEval/14", "completion": "\n    return [string[:i+1] for i in range(len(string))]"}
{"task_id": "HumanEval/158", "completion": "\n    max_unique_chars = 0\n    max_word = \"\"\n\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars:\n            max_unique_chars = unique_chars\n            max_word = word\n        elif unique_chars == max_unique_chars:\n            max_word = min(max_word, word)\n\n    return max_word"}
{"task_id": "HumanEval/16", "completion": "\n    string_lower = string.lower()\n    distinct_characters = set(string_lower)\n    return len(distinct_characters)"}
{"task_id": "HumanEval/162", "completion": "\n    import hashlib\n\n    if not text:\n        return None\n\n    md5_hash = hashlib.md5()\n    md5_hash.update(text.encode('utf-8'))\n    return md5_hash.hexdigest()"}
{"task_id": "HumanEval/88", "completion": "\n    if not array:\n        return []\n\n    sorted_array = sorted(array)\n\n    if (array[0] + array[-1]) % 2 == 0:\n        return sorted_array[::-1]\n    else:\n        return sorted_array"}
{"task_id": "HumanEval/18", "completion": "\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n    return count"}
{"task_id": "HumanEval/90", "completion": "\n    if len(lst) < 2:\n        return None\n    unique_lst = list(set(lst))\n    unique_lst.sort()\n    if len(unique_lst) < 2:\n        return None\n    return unique_lst[1]"}
{"task_id": "HumanEval/160", "completion": "\n    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i + 1]\n        elif operator[i] == '-':\n            result -= operand[i + 1]\n        elif operator[i] == '*':\n            result *= operand[i + 1]\n        elif operator[i] == '//':\n            result //= operand[i + 1]\n        elif operator[i] == '**':\n            result **= operand[i + 1]\n    return result"}
{"task_id": "HumanEval/92", "completion": "\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        return (x == y + z) or (y == x + z) or (z == x + y)\n    else:\n        return False"}
{"task_id": "HumanEval/93", "completion": "\n    def swap_case(char):\n        if char.isupper():\n            return char.lower()\n        else:\n            return char.upper()\n\n    def replace_vowel(char):\n        vowels = 'aeiouAEIOU'\n        if char in vowels:\n            index = vowels.index(char)\n            return vowels[(index + 2) % len(vowels)]\n        else:\n            return char\n\n    encoded_message = ''\n    for char in message:\n        if char.isalpha():\n            encoded_message += replace_vowel(swap_case(char))\n        else:\n            encoded_message += char\n\n    return encoded_message"}
{"task_id": "HumanEval/97", "completion": "\n    unit_a = abs(a) % 10\n    unit_b = abs(b) % 10\n    return unit_a * unit_b"}
{"task_id": "HumanEval/95", "completion": "\n    if not dict:\n        return False\n\n    lower_case = True\n    upper_case = True\n\n    for key in dict:\n        if not isinstance(key, str):\n            return False\n        if key != key.lower():\n            lower_case = False\n        if key != key.upper():\n            upper_case = False\n\n    return lower_case or upper_case"}
{"task_id": "HumanEval/96", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = []\n    for i in range(n):\n        if is_prime(i):\n            primes.append(i)\n    return primes"}
{"task_id": "HumanEval/98", "completion": "\n    uppercase_vowels = \"AEIOU\"\n    count = 0\n\n    for i in range(0, len(s), 2):\n        if s[i] in uppercase_vowels:\n            count += 1\n\n    return count"}
{"task_id": "HumanEval/99", "completion": "\n    num = float(value)\n    if num > 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)"}
{"task_id": "HumanEval/101", "completion": "\n    # Replace commas with spaces and split the string into words\n    words = s.replace(',', ' ').split()\n    return words"}
{"task_id": "HumanEval/100", "completion": "\n    stones = [n]\n    for i in range(1, n):\n        if n % 2 == 0:\n            stones.append(stones[-1] + 2)\n        else:\n            stones.append(stones[-1] + 2)\n    return stones"}
{"task_id": "HumanEval/102", "completion": "\n    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    elif y - 1 >= x:\n        return y - 1\n    else:\n        return -1"}
{"task_id": "HumanEval/94", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(n))\n\n    largest_prime = max(filter(is_prime, lst), default=0)\n    return sum_of_digits(largest_prime)"}
{"task_id": "HumanEval/31", "completion": "\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/104", "completion": "\n    def has_even_digit(num):\n        for digit in str(num):\n            if int(digit) % 2 == 0:\n                return True\n        return False\n\n    result = [num for num in x if not has_even_digit(num)]\n    return sorted(result)"}
{"task_id": "HumanEval/103", "completion": "\n    if n > m:\n        return -1\n    else:\n        total = sum(range(n, m+1))\n        count = m - n + 1\n        avg = round(total / count)\n        return bin(avg)"}
{"task_id": "HumanEval/106", "completion": "\n    def factorial(i):\n        if i == 0 or i == 1:\n            return 1\n        else:\n            return i * factorial(i - 1)\n\n    def sum_of_numbers(i):\n        return sum(range(1, i + 1))\n\n    result = []\n    for i in range(n):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum_of_numbers(i))\n    return result"}
{"task_id": "HumanEval/107", "completion": "\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    even_count = 0\n    odd_count = 0\n\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/108", "completion": "\n    def sum_of_digits(num):\n        if num < 0:\n            return -1 * int(str(num)[1]) + sum(int(digit) for digit in str(num)[2:])\n        else:\n            return sum(int(digit) for digit in str(num))\n\n    count = 0\n    for num in arr:\n        if sum_of_digits(num) > 0:\n            count += 1\n\n    return count"}
{"task_id": "HumanEval/110", "completion": "\n    odd_count_lst1 = sum(1 for num in lst1 if num % 2 != 0)\n    even_count_lst2 = sum(1 for num in lst2 if num % 2 == 0)\n\n    if odd_count_lst1 <= even_count_lst2:\n        return \"YES\"\n    else:\n        return \"NO\""}
{"task_id": "HumanEval/112", "completion": "\n    # Remove characters in c from s\n    result = ''.join([char for char in s if char not in c])\n\n    # Check if the result is a palindrome\n    is_palindrome = result == result[::-1]\n\n    # Return the result and the palindrome check\n    return (result, is_palindrome)"}
{"task_id": "HumanEval/109", "completion": "\n    if not arr:\n        return True\n\n    count = 0\n    for i in range(len(arr) - 1):\n        if arr[i] > arr[i + 1]:\n            count += 1\n            index = i\n\n    if count == 0:\n        return True\n    elif count == 1 and arr[-1] <= arr[0]:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/113", "completion": "\n    result = []\n    for s in lst:\n        odd_count = sum(1 for c in s if int(c) % 2 == 1)\n        result.append(f\"the number of odd elements {odd_count}n the str{odd_count}ng {odd_count} of the {odd_count}nput.\")\n    return result"}
{"task_id": "HumanEval/111", "completion": "\n    # Split the input string into a list of letters\n    letters = test.split()\n\n    # Create an empty dictionary to store the count of each letter\n    letter_count = {}\n\n    # Iterate through the list of letters\n    for letter in letters:\n        # If the letter is already in the dictionary, increment its count\n        if letter in letter_count:\n            letter_count[letter] += 1\n        # If the letter is not in the dictionary, add it with a count of 1\n        else:\n            letter_count[letter] = 1\n\n    # Find the maximum count of any letter\n    max_count = 0\n    for count in letter_count.values():\n        if count > max_count:\n            max_count = count\n\n    # Create a new dictionary to store the letters with the maximum count\n    max_count_letters = {}\n\n    # Iterate through the letter_count dictionary\n    for letter, count in letter_count.items():\n        # If the count of the letter is equal to the maximum count, add it to the max_count_letters dictionary\n        if count == max_count:\n            max_count_letters[letter] = count\n\n    # Return the max_count_letters dictionary\n    return max_count_letters"}
{"task_id": "HumanEval/114", "completion": "\n    min_sum = float('inf')\n    for i in range(len(nums)):\n        current_sum = 0\n        for j in range(i, len(nums)):\n            current_sum += nums[j]\n            min_sum = min(min_sum, current_sum)\n    return min_sum"}
{"task_id": "HumanEval/116", "completion": "\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))"}
{"task_id": "HumanEval/118", "completion": "\n    vowels = \"AEIOUaeiou\"\n    closest_vowel = \"\"\n\n    for i in range(len(word) - 1, 0, -1):\n        if word[i] in vowels and word[i - 1] not in vowels and word[i + 1] not in vowels:\n            closest_vowel = word[i]\n            break\n\n    return closest_vowel"}
{"task_id": "HumanEval/115", "completion": "\n    total_water = sum(row.count(1) for row in grid)\n    return math.ceil(total_water / capacity)"}
{"task_id": "HumanEval/117", "completion": "\n    def count_consonants(word):\n        consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n        count = 0\n        for char in word:\n            if char in consonants:\n                count += 1\n        return count\n\n    words = s.split()\n    result = []\n\n    for word in words:\n        if count_consonants(word) == n:\n            result.append(word)\n\n    return result"}
{"task_id": "HumanEval/119", "completion": "\n    # Initialize counters for open and close parentheses\n    open_count = 0\n    close_count = 0\n\n    # Iterate through the list of strings\n    for s in lst:\n        # Count the open and close parentheses in each string\n        open_count += s.count('(')\n        close_count += s.count(')')\n\n    # Check if the counts are equal, meaning the strings can be concatenated to form a good string\n    if open_count == close_count:\n        return 'Yes'\n    else:\n        return 'No'"}
{"task_id": "HumanEval/121", "completion": "\n    odd_sum = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 != 0:\n            odd_sum += lst[i]\n    return odd_sum"}
{"task_id": "HumanEval/122", "completion": "\n    result = 0\n    for i in range(k):\n        if 0 <= arr[i] <= 99:\n            result += arr[i]\n    return result"}
{"task_id": "HumanEval/120", "completion": "\n    # Sort the array in descending order\n    arr.sort(reverse=True)\n\n    # Return the first k elements of the sorted array\n    return arr[:k]"}
{"task_id": "HumanEval/53", "completion": "\n    return x + y"}
{"task_id": "HumanEval/123", "completion": "\n    odd_collatz = []\n    while n != 1:\n        if n % 2 == 1:\n            odd_collatz.append(n)\n        n = n // 2 if n % 2 == 0 else 3 * n + 1\n    odd_collatz.append(1)\n    return sorted(odd_collatz)"}
{"task_id": "HumanEval/125", "completion": "\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        odd_count = 0\n        for char in txt:\n            if char.islower() and (ord(char) - ord('a')) % 2 == 1:\n                odd_count += 1\n        return odd_count"}
{"task_id": "HumanEval/59", "completion": "\n    def is_prime(num: int) -> bool:\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    largest_factor = 1\n    for i in range(2, n + 1):\n        if n % i == 0 and is_prime(i):\n            largest_factor = i\n            n //= i\n            if n == 1:\n                break\n    return largest_factor"}
{"task_id": "HumanEval/61", "completion": "\n    count = 0\n    for bracket in brackets:\n        if bracket == \"(\":\n            count += 1\n        elif bracket == \")\":\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0"}
{"task_id": "HumanEval/124", "completion": "\n    import re\n\n    if not date:\n        return False\n\n    pattern = re.compile(r'^(\\d{2})-(\\d{2})-(\\d{4})$')\n    match = pattern.match(date)\n\n    if not match:\n        return False\n\n    month, day, year = map(int, match.groups())\n\n    if month < 1 or month > 12:\n        return False\n\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    else:  # month == 2\n        if day < 1 or day > 29:\n            return False\n\n    return True"}
{"task_id": "HumanEval/126", "completion": "\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n        if lst.count(lst[i]) > 1:\n            return False\n    return True"}
{"task_id": "HumanEval/65", "completion": "\n    x_str = str(x)\n    num_digits = len(x_str)\n    if shift > num_digits:\n        return x_str[::-1]\n    else:\n        shift %= num_digits\n        return x_str[-shift:] + x_str[:-shift]"}
{"task_id": "HumanEval/63", "completion": "\n    def memoize(f):\n        memo = {}\n        def helper(x):\n            if x not in memo:            \n                memo[x] = f(x)\n            return memo[x]\n        return helper\n\n    @memoize\n    def fibfib_helper(n):\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 0\n        elif n == 2:\n            return 1\n        else:\n            return fibfib_helper(n-1) + fibfib_helper(n-2) + fibfib_helper(n-3)\n\n    return fibfib_helper(n)"}
{"task_id": "HumanEval/67", "completion": "\n    import re\n\n    # Extract the number of apples and oranges from the string\n    numbers = re.findall(r'\\d+', s)\n    apples = int(numbers[0])\n    oranges = int(numbers[1])\n\n    # Calculate the number of mangoes\n    mangoes = n - apples - oranges\n\n    return mangoes"}
{"task_id": "HumanEval/71", "completion": "\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/73", "completion": "\n    changes = 0\n    left = 0\n    right = len(arr) - 1\n\n    while left < right:\n        if arr[left] != arr[right]:\n            changes += 1\n        left += 1\n        right -= 1\n\n    return changes"}
{"task_id": "HumanEval/69", "completion": "\n    from collections import Counter\n\n    # Count the frequency of each integer in the list\n    freqs = Counter(lst)\n\n    # Initialize the result variable to -1\n    result = -1\n\n    # Iterate through the unique integers in the list\n    for num in freqs:\n        # Check if the frequency is greater than or equal to the integer itself\n        if freqs[num] >= num:\n            # Update the result variable if the current integer is greater than the previous result\n            result = max(result, num)\n\n    return result"}
{"task_id": "HumanEval/0", "completion": "\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False"}
{"task_id": "HumanEval/77", "completion": "\n    # Check if the cube root of the absolute value of a is an integer\n    cube_root = abs(a) ** (1/3)\n    return round(cube_root) ** 3 == abs(a)"}
{"task_id": "HumanEval/5", "completion": "\n    result = []\n    for i, num in enumerate(numbers):\n        if i > 0:\n            result.append(delimeter)\n        result.append(num)\n    return result"}
{"task_id": "HumanEval/151", "completion": "\n    result = 0\n    for num in lst:\n        if isinstance(num, int) and num >= 0 and num % 2 == 1:\n            result += num ** 2\n    return result"}
{"task_id": "HumanEval/147", "completion": "\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count"}
{"task_id": "HumanEval/9", "completion": "\n    result = []\n    current_max = float('-inf')\n    for num in numbers:\n        current_max = max(current_max, num)\n        result.append(current_max)\n    return result"}
{"task_id": "HumanEval/155", "completion": "\n    even_count = 0\n    odd_count = 0\n\n    # Convert the number to its absolute value to handle negative numbers\n    num = abs(num)\n\n    # Iterate through each digit in the number\n    for digit in str(num):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/13", "completion": "\n    while b:\n        a, b = b, a % b\n    return a"}
{"task_id": "HumanEval/85", "completion": "\n    result = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            result += lst[i]\n    return result"}
{"task_id": "HumanEval/163", "completion": "\n    if a > b:\n        a, b = b, a\n\n    even_digits = []\n    for i in range(a, b + 1):\n        if i % 2 == 0:\n            even_digits.append(i)\n\n    return even_digits"}
{"task_id": "HumanEval/89", "completion": "\n    encrypted = \"\"\n    for char in s:\n        if char.isalpha():\n            shift = 2 * 2\n            char_code = ord(char) + shift\n            if char.islower():\n                encrypted += chr(char_code) if char_code <= ord('z') else chr(ord('a') + char_code - ord('z') - 1)\n            else:\n                encrypted += chr(char_code) if char_code <= ord('Z') else chr(ord('A') + char_code - ord('Z') - 1)\n        else:\n            encrypted += char\n    return encrypted"}
{"task_id": "HumanEval/17", "completion": "\n    beats = []\n    notes = music_string.split()\n    for note in notes:\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif note == '.|':\n            beats.append(1)\n    return beats"}
{"task_id": "HumanEval/81", "completion": "\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append(\"A+\")\n        elif gpa > 3.7:\n            letter_grades.append(\"A\")\n        elif gpa > 3.3:\n            letter_grades.append(\"A-\")\n        elif gpa > 3.0:\n            letter_grades.append(\"B+\")\n        elif gpa > 2.7:\n            letter_grades.append(\"B\")\n        elif gpa > 2.3:\n            letter_grades.append(\"B-\")\n        elif gpa > 2.0:\n            letter_grades.append(\"C+\")\n        elif gpa > 1.7:\n            letter_grades.append(\"C\")\n        elif gpa > 1.3:\n            letter_grades.append(\"C-\")\n        elif gpa > 1.0:\n            letter_grades.append(\"D+\")\n        elif gpa > 0.7:\n            letter_grades.append(\"D\")\n        elif gpa > 0.0:\n            letter_grades.append(\"D-\")\n        else:\n            letter_grades.append(\"E\")\n    return letter_grades"}
{"task_id": "HumanEval/24", "completion": "\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i"}
{"task_id": "HumanEval/22", "completion": "\n    return [value for value in values if isinstance(value, int)]"}
{"task_id": "HumanEval/159", "completion": "\n    # Calculate the number of carrots you can eat\n    carrots_to_eat = min(need, remaining)\n\n    # Update the total number of eaten carrots and the remaining carrots\n    total_eaten = number + carrots_to_eat\n    remaining -= carrots_to_eat\n\n    # Return the result as an array\n    return [total_eaten, remaining]"}
{"task_id": "HumanEval/26", "completion": "\n    unique_numbers = []\n    for number in numbers:\n        if numbers.count(number) == 1:\n            unique_numbers.append(number)\n    return unique_numbers"}
{"task_id": "HumanEval/20", "completion": "\n    numbers.sort()\n    min_diff = float('inf')\n    closest_pair = (0, 0)\n\n    for i in range(len(numbers) - 1):\n        diff = numbers[i + 1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i + 1])\n\n    return closest_pair"}
{"task_id": "HumanEval/28", "completion": "\n    result = \"\"\n    for string in strings:\n        result += string\n    return result"}
{"task_id": "HumanEval/30", "completion": "\n    return [num for num in l if num > 0]"}
{"task_id": "HumanEval/34", "completion": "\n    return sorted(set(l))"}
{"task_id": "HumanEval/36", "completion": "\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count"}
{"task_id": "HumanEval/42", "completion": "\n    return [x + 1 for x in l]"}
{"task_id": "HumanEval/38", "completion": "\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # reverse cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"}
{"task_id": "HumanEval/44", "completion": "\n    if x == 0:\n        return '0'\n    digits = []\n    while x:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(digits[::-1])"}
{"task_id": "HumanEval/32", "completion": "\n    # Using bisection method to find the zero of the polynomial\n    lower_bound = -100\n    upper_bound = 100\n    tolerance = 1e-6\n\n    while (upper_bound - lower_bound) > tolerance:\n        mid_point = (lower_bound + upper_bound) / 2\n        if poly(xs, mid_point) == 0:\n            return mid_point\n        elif poly(xs, lower_bound) * poly(xs, mid_point) < 0:\n            upper_bound = mid_point\n        else:\n            lower_bound = mid_point\n\n    return (lower_bound + upper_bound) / 2"}
{"task_id": "HumanEval/40", "completion": "\n    n = len(l)\n    if n < 3:\n        return False\n\n    l.sort()\n\n    for i in range(n - 2):\n        if i > 0 and l[i] == l[i - 1]:\n            continue\n        left, right = i + 1, n - 1\n        while left < right:\n            total = l[i] + l[left] + l[right]\n            if total == 0:\n                return True\n            elif total < 0:\n                left += 1\n            else:\n                right -= 1\n\n    return False"}
{"task_id": "HumanEval/50", "completion": "\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/52", "completion": "\n    for num in l:\n        if num >= t:\n            return False\n    return True"}
{"task_id": "HumanEval/48", "completion": "\n    # Remove any non-alphanumeric characters and convert to lowercase\n    cleaned_text = ''.join(char.lower() for char in text if char.isalnum())\n\n    # Check if the cleaned text is equal to its reverse\n    return cleaned_text == cleaned_text[::-1]"}
{"task_id": "HumanEval/46", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n\n    a, b, c, d = 0, 0, 2, 0\n    for _ in range(n - 3):\n        a, b, c, d = b, c, d, a + b + c + d\n\n    return d"}
{"task_id": "HumanEval/58", "completion": "\n    common_elements = list(set(l1) & set(l2))\n    common_elements.sort()\n    return common_elements"}
{"task_id": "HumanEval/62", "completion": "\n    return [i * xs[i] for i in range(1, len(xs))]"}
{"task_id": "HumanEval/66", "completion": "\n    upper_sum = 0\n    for char in s:\n        if char.isupper():\n            upper_sum += ord(char)\n    return upper_sum"}
{"task_id": "HumanEval/70", "completion": "\n    sorted_lst = sorted(lst)\n    result = []\n    while sorted_lst:\n        result.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result.append(sorted_lst.pop(-1))\n    return result"}
{"task_id": "HumanEval/145", "completion": "\n    def sum_of_digits(num):\n        return sum(int(digit) for digit in str(abs(num)))\n\n    return sorted(nums, key=lambda x: (sum_of_digits(x), nums.index(x)))"}
{"task_id": "HumanEval/3", "completion": "\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/11", "completion": "\n    result = ''.join([str(int(x) ^ int(y)) for x, y in zip(a, b)])\n    return result"}
{"task_id": "HumanEval/79", "completion": "\n    binary_str = bin(decimal)[2:]  # Convert decimal to binary and remove the '0b' prefix\n    return f\"db{binary_str}db\"  # Add 'db' at the beginning and end of the binary string"}
{"task_id": "HumanEval/23", "completion": "\n    return len(string)"}
{"task_id": "HumanEval/161", "completion": "\n    if any(c.isalpha() for c in s):\n        return ''.join(c.lower() if c.isupper() else c.upper() for c in s)\n    else:\n        return s[::-1]"}
{"task_id": "HumanEval/27", "completion": "\n    return ''.join(char.lower() if char.isupper() else char.upper() for char in string)"}
{"task_id": "HumanEval/153", "completion": "\n    def strength(extension):\n        CAP = sum(1 for c in extension if c.isupper())\n        SM = sum(1 for c in extension if c.islower())\n        return CAP - SM\n\n    strongest_extension = max(extensions, key=strength)\n    return f\"{class_name}.{strongest_extension}\""}
{"task_id": "HumanEval/87", "completion": "\n    result = []\n    for i, row in enumerate(lst):\n        for j, value in enumerate(row):\n            if value == x:\n                result.append((i, j))\n    result.sort(key=lambda coord: (coord[0], -coord[1]))\n    return result"}
{"task_id": "HumanEval/35", "completion": "\n    return max(l)"}
{"task_id": "HumanEval/19", "completion": "\n    # Create a dictionary to map number words to their integer values\n    number_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n\n    # Split the input string into a list of number words\n    number_words = numbers.split()\n\n    # Convert the number words to integers using the number_map\n    number_values = [number_map[word] for word in number_words]\n\n    # Sort the integer values\n    sorted_values = sorted(number_values)\n\n    # Convert the sorted integer values back to number words\n    sorted_words = [key for value in sorted_values for key, val in number_map.items() if value == val]\n\n    # Join the sorted number words into a single string\n    sorted_numbers = ' '.join(sorted_words)\n\n    return sorted_numbers"}
{"task_id": "HumanEval/43", "completion": "\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False"}
{"task_id": "HumanEval/47", "completion": "\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]"}
{"task_id": "HumanEval/51", "completion": "\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for char in text:\n        if char not in vowels:\n            result += char\n    return result"}
{"task_id": "HumanEval/39", "completion": "\n    def is_prime(num: int) -> bool:\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fib(num: int) -> int:\n        if num == 0:\n            return 0\n        elif num == 1:\n            return 1\n        else:\n            return fib(num - 1) + fib(num - 2)\n\n    count = 0\n    i = 0\n    while count < n:\n        fib_num = fib(i)\n        if is_prime(fib_num):\n            count += 1\n        i += 1\n\n    return fib_num"}
{"task_id": "HumanEval/60", "completion": "\n    return sum(range(1, n+1))"}
{"task_id": "HumanEval/7", "completion": "\n    return [string for string in strings if substring in string]"}
{"task_id": "HumanEval/157", "completion": "\n    sides = sorted([a, b, c])\n    return sides[0]**2 + sides[1]**2 == sides[2]**2"}
{"task_id": "HumanEval/105", "completion": "\n    # Filter the array to only include numbers between 1 and 9 inclusive\n    filtered_arr = [num for num in arr if 1 <= num <= 9]\n\n    # Sort the filtered array in descending order\n    sorted_arr = sorted(filtered_arr, reverse=True)\n\n    # Create a dictionary to map numbers to their corresponding names\n    num_to_name = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\",\n    }\n\n    # Replace each number in the sorted array with its corresponding name\n    result = [num_to_name[num] for num in sorted_arr]\n\n    return result"}
{"task_id": "HumanEval/75", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True\n\n    def prime_factors(n):\n        factors = []\n        for i in range(2, n + 1):\n            if is_prime(i) and n % i == 0:\n                factors.append(i)\n        return factors\n\n    factors = prime_factors(a)\n    return len(factors) == 3 and a == factors[0] * factors[1] * factors[2]"}
{"task_id": "HumanEval/91", "completion": "\n    boredoms = 0\n    sentences = re.split(r'[.!?]', S)\n    for sentence in sentences:\n        words = sentence.strip().split()\n        if words and words[0] == \"I\":\n            boredoms += 1\n    return boredoms"}
{"task_id": "HumanEval/68", "completion": "\n    smallest_even = None\n    smallest_index = None\n\n    for index, value in enumerate(arr):\n        if value % 2 == 0:\n            if smallest_even is None or value < smallest_even:\n                smallest_even = value\n                smallest_index = index\n\n    if smallest_even is not None:\n        return [smallest_even, smallest_index]\n    else:\n        return []"}
{"task_id": "HumanEval/25", "completion": "\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors"}
{"task_id": "HumanEval/49", "completion": "\n    return pow(2, n, p)"}
{"task_id": "HumanEval/41", "completion": "\n    # Since each car moving left to right will collide with each car moving right to left,\n    # the total number of collisions will be the product of the number of cars in each direction.\n    return n * n"}
{"task_id": "HumanEval/33", "completion": "\n    # Extract the values at indices divisible by 3\n    divisible_by_three = [l[i] for i in range(0, len(l), 3)]\n\n    # Sort the extracted values\n    divisible_by_three.sort()\n\n    # Replace the values at indices divisible by 3 with the sorted values\n    for i, value in enumerate(divisible_by_three):\n        l[i * 3] = value\n\n    return l"}
{"task_id": "HumanEval/45", "completion": "\n    return 0.5 * a * h"}
{"task_id": "HumanEval/15", "completion": "\n    return \" \".join(str(i) for i in range(n+1))"}
{"task_id": "HumanEval/29", "completion": "\n    return [string for string in strings if string.startswith(prefix)]"}
{"task_id": "HumanEval/64", "completion": "\n    s = s.lower()\n    count = 0\n    vowels = \"aeiou\"\n    for char in s:\n        if char in vowels:\n            count += 1\n    if s[-1] == 'y':\n        count += 1\n    return count"}
{"task_id": "HumanEval/149", "completion": "\n    # Remove strings with odd lengths\n    even_length_strings = [s for s in lst if len(s) % 2 == 0]\n\n    # Sort the list by length and then alphabetically\n    sorted_list = sorted(even_length_strings, key=lambda x: (len(x), x))\n\n    return sorted_list"}
{"task_id": "HumanEval/21", "completion": "\n    min_num = min(numbers)\n    max_num = max(numbers)\n    range_num = max_num - min_num\n    return [(num - min_num) / range_num for num in numbers]"}
{"task_id": "HumanEval/54", "completion": "\n    # Create sets of unique characters from both strings\n    set_s0 = set(s0)\n    set_s1 = set(s1)\n\n    # Compare the sets to see if they have the same characters\n    return set_s0 == set_s1"}
{"task_id": "HumanEval/83", "completion": "\n    if n == 1:\n        return 2\n    else:\n        return 2 * (10 ** (n - 1)) - 2 * (10 ** (n - 2))"}
{"task_id": "HumanEval/37", "completion": "\n    even_indices = [l[i] for i in range(0, len(l), 2)]\n    even_indices.sort()\n    result = [even_indices.pop(0) if i % 2 == 0 else l[i] for i in range(len(l))]\n    return result"}
{"task_id": "HumanEval/72", "completion": "\n    def is_balanced(lst):\n        return lst == lst[::-1]\n\n    total_weight = sum(q)\n    if is_balanced(q) and total_weight <= w:\n        return True\n    else:\n        return False"}
